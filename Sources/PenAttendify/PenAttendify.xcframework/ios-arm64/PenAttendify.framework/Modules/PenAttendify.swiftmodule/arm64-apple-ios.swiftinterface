// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PenAttendify
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import CoreLocation
import Foundation
@_exported import PenAttendify
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public class PenAttendifyConfiguration {
  public init(baseUrl: Swift.String, serviceName: Swift.String, clientName: Swift.String, clientKey: Swift.String)
  @objc deinit
}
public class PenAttendifyConfigurationBuilder {
  public init()
  public func setBaseUrl(_ baseUrl: Swift.String) -> Self
  public func setServiceName(_ serviceName: Swift.String) -> Self
  public func setClientName(_ clientName: Swift.String) -> Self
  public func setClientKey(_ clientKey: Swift.String) -> Self
  public func build() -> PenAttendify.PenAttendifyConfiguration
  @objc deinit
}
public protocol PenAttendifyDelegate : AnyObject {
  func didFinishInitializing()
  func didStartScanning()
  func didFinishScanning(results: [(zoneId: Swift.Int, zoneTitle: Swift.String?, zoneRatio: Swift.Double)])
  func didFailWithError(error: PenAttendify.PenAttendifyError)
}
@_hasMissingDesignatedInitializers public class PIAttendify {
  weak public static var delegate: (any PenAttendify.PenAttendifyDelegate)?
  public static func initialize(with configuration: PenAttendify.PenAttendifyConfiguration)
  public static func startScan()
  public static func stopScan()
  public static func deinitialize()
  public static func isInitialized() -> Swift.Bool
  @objc deinit
}
public enum PenAttendifyError {
  case locationPermissionUnauthorized
  case bluetoothTurnedOff
  case serviceNotInitialized
  public static func == (a: PenAttendify.PenAttendifyError, b: PenAttendify.PenAttendifyError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PenAttendify.PenAttendifyError : Swift.Equatable {}
extension PenAttendify.PenAttendifyError : Swift.Hashable {}
